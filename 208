
class TrieNode {
    public boolean isLeaf = false;
    public char c;
    public TrieNode[] children = new TrieNode[26];
    
    public TrieNode() {
        
    }
    
    public TrieNode(char c) {
        this.c = c;
    }
}


class Trie {
    private TrieNode root;
    
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode cur = root;
        for(int i=0; i<word.length(); i++) {
            int idx = word.charAt(i) - 'a';
            if(cur.children[idx] == null) {
                cur.children[idx] = new TrieNode(word.charAt(i));
            }
            cur = cur.children[idx];
        }
        cur.isLeaf = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode cur = root;
        for(int i=0; i<word.length(); i++) {
            int idx = word.charAt(i) - 'a';
            if(cur.children[idx] == null) {
                return false;
            } else {
                cur = cur.children[idx];
            }
        }
        return cur.isLeaf;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode cur = root;
        for(int i=0; i<prefix.length(); i++) {
            int idx = prefix.charAt(i) - 'a';
            if(cur.children[idx] == null) {
                return false;
            } else {
                cur = cur.children[idx];
            }
        }
        return true;
    }
}
