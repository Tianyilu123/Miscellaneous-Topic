
class Solution {
    public List<List<String>> wordSquares(String[] words) {
        List<List<String>> res = new ArrayList<>();
        if(words == null || words.length == 0)
            return res;
        
        int len = words[0].length();
        String[] cur = new String[len];
        
        Trie trie = new Trie();
        for(String word : words) {
            trie.addWord(word);
        }
        
        dfs(res, cur, 0, trie);
        return res;
    }
    
    private void dfs(List<List<String>> res, String[] cur, int idx, Trie trie) {
        if(idx == cur.length) {
            res.add(new ArrayList<String>(Arrays.asList(cur)));
            return;
        }
        
        StringBuilder prefix = new StringBuilder();
        for(int i=0; i<idx; i++) {
            prefix.append(cur[i].charAt(idx));
        }
        
        List<String> nextWord = trie.startPrefix(prefix.toString());
        for(String word : nextWord) {
            cur[idx] = word;
            dfs(res, cur, idx+1, trie);
        }
    }
}

class Trie {
    private class TrieNode {
        public char ch;
        public TrieNode[] nexts;
        public boolean isLeaf;
        
        public TrieNode(char ch) {
            this.ch = ch;
            nexts = new TrieNode[26];
            this.isLeaf = false;
        }
        
        public List<String> getAllSubtree(StringBuilder curString) {
            List<String> ret = new ArrayList<>();
            int len = curString.length();
            curString.append(this.ch);
            if(this.isLeaf) {
                ret.add(curString.toString());
            } else {
                for(TrieNode next : this.nexts) {
                    if(next != null) {
                        ret.addAll(next.getAllSubtree(curString));
                    }
                }
            }
            curString.setLength(len);
            return ret;
        }
    }
    
    public TrieNode root;
    
    public Trie() {
        this.root = new TrieNode('\0');
    }
    
    public void addWord(String word) {
        TrieNode cur = root;
        int len = word.length();
        
        for(int i=0; i<len; i++) {
            int idx = word.charAt(i) - 'a';
            if(cur.nexts[idx] == null) {
                cur.nexts[idx] = new TrieNode(word.charAt(i));
            }
            
            cur = cur.nexts[idx];
        }
        cur.isLeaf = true;
    }
    
    public List<String> startPrefix(String prefix) {
        TrieNode cur = root;
        int len = prefix.length();
        
        for(int i=0; i<len; i++) {
            int idx = prefix.charAt(i) - 'a';
            if(cur.nexts[idx] != null) {
                cur = cur.nexts[idx];
            } else {
                return new ArrayList<String>();
            }
        }
        
        List<String> ret = new ArrayList<>();
        for(TrieNode next : cur.nexts) {
            if(next != null) {
                ret.addAll(next.getAllSubtree(new StringBuilder(prefix)));
            }
        }
        return ret;
    }
}
