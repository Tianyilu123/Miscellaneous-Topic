
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        if(board == null || board.length==0 || board[0].length==0 || 
                words == null || words.length==0)
            return res;
        
        TrieNode root = new TrieNode('\0');
        
        // build Trie for words
        for(String s : words) {
            TrieNode cur = root;
            for(int i=0; i<s.length(); i++) {
                int idx = s.charAt(i) - 'a';
                if(cur.nexts[idx] == null) {
                    cur.nexts[idx] = new TrieNode(s.charAt(i));
                }
                cur = cur.nexts[idx];
            }
            cur.isLeaf = true;
        }
        
        // search
        int row = board.length, col = board[0].length;
        boolean visited[][] = new boolean[row][col];
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                search(res, board, visited, i, j, new StringBuilder(), root);
            }
        }
        
        return res;
    }
    
    public void search(List<String> res, char[][] board, boolean[][] visited, int i, int j,
                            StringBuilder curStr, TrieNode n) {
        int row = board.length, col = board[0].length;
        if(i<0 || i>=row || j<0 || j>=col || visited[i][j] || n.nexts[board[i][j]-'a']==null)
            return;
        
        TrieNode next = n.nexts[board[i][j]-'a'];
        visited[i][j] = true;
        curStr.append(board[i][j]);
        
        if(next.isLeaf) {
            res.add(curStr.toString());
            next.isLeaf = false;
        }
        
        search(res, board, visited, i-1, j, curStr, next);
        search(res, board, visited, i+1, j, curStr, next);
        search(res, board, visited, i, j-1, curStr, next);
        search(res, board, visited, i, j+1, curStr, next);
        
        visited[i][j] = false;
        curStr.deleteCharAt(curStr.length()-1);
    }
}

class TrieNode {
    public char ch;
    public TrieNode[] nexts = new TrieNode[26];
    public boolean isLeaf = false;
    public boolean isFound = false;
    
    public TrieNode(char c) {
        ch = c;
    }
}
