
import java.util.Map.Entry;

class Solution {
    private static class UnionFind{
        private int[] parent;
        private int[] size;
        
        public UnionFind(int capacity) {
            this.parent = new int[capacity];
            this.size = new int[capacity];
            for(int i=0; i<capacity; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        
        public int getRoot(int user) {
            int cur = user;
            while(parent[cur] != cur){
                parent[cur] = parent[parent[cur]];
                cur = parent[cur];
            }
            parent[user] = cur;
            return cur;
        }
        
        public boolean find(int user1, int user2) {
            return getRoot(user1) == getRoot(user2);
        }
        
        public void union(int user1, int user2) {
            int root1 = getRoot(user1);
            int root2 = getRoot(user2);
            if(size[root1] < size[root2]) {
                parent[root1] = root2;
                size[root2] += size[root1];
            } else {
                parent[root2] = root1;
                size[root1] += size[root2];
            }
        }
    }
        
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        if(accounts == null)
            throw new IllegalArgumentException();
        
        int len = accounts.size();
        UnionFind uf = new UnionFind(len);
        
        HashMap<String, Integer> emailToUserMap = new HashMap<>();
        
        for(int i=0; i<len; i++) {
            List<String> account = accounts.get(i);
            for(int j=1; j<account.size(); j++) {
                String email = account.get(j);
                Integer user = emailToUserMap.get(email);
                if(user == null) {
                    emailToUserMap.put(email, i);
                } else {
                    uf.union(i, user);
                }
            }
        }
        
        HashMap<Integer, HashSet<String>> userToEmailsMap = new HashMap<>();
        for(int i=0; i<len; i++) {
            int root = uf.getRoot(i);
            if(!userToEmailsMap.containsKey(root)) {
                userToEmailsMap.put(root, new HashSet<>());
            }
            
            for(int j=1; j<accounts.get(i).size(); j++) {
                userToEmailsMap.get(root).add(accounts.get(i).get(j));
            }
        }
        
        List<List<String>> res = new ArrayList<>();
        for(Entry<Integer, HashSet<String>> e : userToEmailsMap.entrySet()) {
            List<String> list = new LinkedList<>();
            
            list.addAll(e.getValue());
            Collections.sort(list);
            
            list.add(0, accounts.get(e.getKey()).get(0));
            
            res.add(list);
        }
        
        return res;
    }
}
